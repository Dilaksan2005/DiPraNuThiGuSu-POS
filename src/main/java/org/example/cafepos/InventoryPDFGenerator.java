package org.example.cafepos;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import javafx.collections.ObservableList;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class InventoryPDFGenerator {

    private static final float MARGIN = 50f;
    private static final float TITLE_FONT_SIZE = 16f;
    private static final float HEADER_FONT_SIZE = 10f;
    private static final float DATA_FONT_SIZE = 9f;
    private static final float SUMMARY_FONT_SIZE = 11f;
    private static final float ROW_HEIGHT = 25f;  // Increased row height
    private static final float CELL_PADDING = 5f; // Increased padding
    private static final float TEXT_VERTICAL_OFFSET = 7f; // Added vertical offset for text

    public static void generateInventoryReport(ObservableList<ProductData> inventoryData, String username) throws IOException {
        PDDocument document = new PDDocument();
        PDPage page = new PDPage(PDRectangle.A4);
        document.addPage(page);

        PDRectangle mediaBox = page.getMediaBox();
        float pageWidth = mediaBox.getWidth();
        float pageHeight = mediaBox.getHeight();
        float tableWidth = pageWidth - 2 * MARGIN;

        // Adjusted column proportions (must sum to 1.0)
        float[] columnProportions = {0.11f, 0.20f, 0.10f, 0.08f, 0.13f, 0.13f, 0.25f};
        float[] columnWidths = new float[columnProportions.length];
        for (int i = 0; i < columnProportions.length; i++) {
            columnWidths[i] = tableWidth * columnProportions[i];
        }

        try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
            PDFont fontBold = PDType1Font.HELVETICA_BOLD;
            PDFont fontRegular = PDType1Font.HELVETICA;

            float yPosition = pageHeight - MARGIN;

            // Title
            yPosition = addTitleSection(contentStream, fontBold, fontRegular, yPosition, username);

            float tableYPosition = yPosition - 15f; // Added more space before table
            int totalRows = inventoryData.size() + 1;
            float tableHeight = totalRows * ROW_HEIGHT;
            float tableBottom = tableYPosition - tableHeight;

            drawTableGrid(contentStream, MARGIN, tableYPosition, tableBottom, columnWidths, totalRows);
            addTableHeaders(contentStream, fontBold, MARGIN, tableYPosition, columnWidths, new String[]{
                    "Product ID", "Product Name", "Type", "Stock", "Price", "Status", "Last Update"
            });
            addTableData(contentStream, fontRegular, MARGIN, tableYPosition, columnWidths, inventoryData);
            addSummarySection(contentStream, fontBold, MARGIN, tableBottom - 40f, inventoryData); // More space after table
        }

        String fileName = "inventory_report_" + System.currentTimeMillis() + ".pdf";
        document.save(fileName);
        document.close();
        openPDFFile(fileName);
    }

    private static float addTitleSection(PDPageContentStream cs, PDFont bold, PDFont regular,
                                         float y, String username) throws IOException {
        cs.beginText();
        cs.setFont(bold, TITLE_FONT_SIZE);
        cs.newLineAtOffset(MARGIN, y);
        cs.showText("INVENTORY REPORT");
        cs.endText();
        y -= 25f;

        String date = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        cs.beginText();
        cs.setFont(regular, HEADER_FONT_SIZE);
        cs.newLineAtOffset(MARGIN, y);
        cs.showText("Generated on: " + date);
        cs.endText();
        y -= 20f; // Increased spacing

        cs.beginText();
        cs.setFont(regular, HEADER_FONT_SIZE);
        cs.newLineAtOffset(MARGIN, y);
        cs.showText("Generated by: " + username);
        cs.endText();
        return y - 25f; // Increased spacing
    }

    private static void drawTableGrid(PDPageContentStream cs, float xStart, float yStart,
                                      float yEnd, float[] colWidths, int rows) throws IOException {
        float tableWidth = 0;
        for (float w : colWidths) tableWidth += w;

        for (int i = 0; i <= rows; i++) {
            float y = yStart - i * ROW_HEIGHT;
            cs.moveTo(xStart, y);
            cs.lineTo(xStart + tableWidth, y);
        }

        float x = xStart;
        cs.moveTo(x, yStart);
        cs.lineTo(x, yEnd);
        for (float width : colWidths) {
            x += width;
            cs.moveTo(x, yStart);
            cs.lineTo(x, yEnd);
        }

        cs.stroke();
    }

    private static void addTableHeaders(PDPageContentStream cs, PDFont font,
                                        float xStart, float yStart, float[] widths, String[] headers) throws IOException {
        cs.setFont(font, HEADER_FONT_SIZE);
        float yText = yStart - ROW_HEIGHT + TEXT_VERTICAL_OFFSET + 3f; // Adjusted vertical position
        float x = xStart;

        for (int i = 0; i < headers.length; i++) {
            String text = headers[i];
            float textWidth = font.getStringWidth(text) / 1000 * HEADER_FONT_SIZE;
            float xOffset = x + (widths[i] - textWidth) / 2;

            cs.beginText();
            cs.newLineAtOffset(xOffset, yText);
            cs.showText(text);
            cs.endText();

            x += widths[i];
        }
    }

    private static void addTableData(PDPageContentStream cs, PDFont font,
                                     float xStart, float yStart, float[] widths,
                                     ObservableList<ProductData> data) throws IOException {
        cs.setFont(font, DATA_FONT_SIZE);
        float y = yStart - ROW_HEIGHT;

        for (ProductData p : data) {
            float x = xStart;
            float textY = y - ROW_HEIGHT + TEXT_VERTICAL_OFFSET; // Adjusted vertical position

            drawText(cs, font, p.getProductId(), x + CELL_PADDING, textY);
            x += widths[0];

            drawText(cs, font, p.getProductName(), x + CELL_PADDING, textY);
            x += widths[1];

            drawCenteredText(cs, font, p.getType(), x, widths[2], textY);
            x += widths[2];

            drawRightText(cs, font, String.valueOf(p.getStock()), x, widths[3], textY);
            x += widths[3];

            drawRightText(cs, font, String.format("LKR %.2f", p.getPrice()), x, widths[4], textY);
            x += widths[4];

            drawCenteredText(cs, font, p.getStatus(), x, widths[5], textY);
            x += widths[5];

            drawCenteredText(cs, font, p.getDate().toString(), x, widths[6], textY);

            y -= ROW_HEIGHT;
        }
    }

    private static void drawText(PDPageContentStream cs, PDFont font, String text, float x, float y) throws IOException {
        cs.beginText();
        cs.newLineAtOffset(x, y);
        cs.showText(text);
        cs.endText();
    }

    private static void drawCenteredText(PDPageContentStream cs, PDFont font, String text,
                                         float x, float width, float y) throws IOException {
        float textWidth = font.getStringWidth(text) / 1000 * DATA_FONT_SIZE;
        float xOffset = x + (width - textWidth) / 2;
        drawText(cs, font, text, xOffset, y);
    }

    private static void drawRightText(PDPageContentStream cs, PDFont font, String text,
                                      float x, float width, float y) throws IOException {
        float textWidth = font.getStringWidth(text) / 1000 * DATA_FONT_SIZE;
        float xOffset = x + width - textWidth - CELL_PADDING;
        drawText(cs, font, text, xOffset, y);
    }

    private static void addSummarySection(PDPageContentStream cs, PDFont font,
                                          float xStart, float y, ObservableList<ProductData> data) throws IOException {
        cs.setFont(font, SUMMARY_FONT_SIZE);
        cs.moveTo(xStart, y + 20f); // Adjusted position
        cs.lineTo(xStart + 300f, y + 20f);
        cs.stroke();

        drawText(cs, font, "Total Products: " + data.size(), xStart, y);

        double totalValue = data.stream().mapToDouble(p -> p.getPrice() * p.getStock()).sum();
        drawText(cs, font, String.format("Total Inventory Value: LKR %,.2f", totalValue), xStart, y - 25f); // Increased spacing
    }

    private static void openPDFFile(String fileName) throws IOException {
        File file = new File(fileName);
        if (java.awt.Desktop.isDesktopSupported()) {
            java.awt.Desktop.getDesktop().open(file);
        }
    }
}